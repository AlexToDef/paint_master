// Generated by CoffeeScript 1.7.1
(function() {
  var Painter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PaintMe = {};

  window.PaintMe.Instruments = {};

  window.PaintMe.Actions = {};

  window.PaintMe.Painter = Painter = (function() {
    function Painter(opts) {
      this.dismiss = __bind(this.dismiss, this);
      this.saveState = __bind(this.saveState, this);
      this.reset = __bind(this.reset, this);
      this.redo = __bind(this.redo, this);
      this.undo = __bind(this.undo, this);
      this.enablePainting = __bind(this.enablePainting, this);
      this.opts = opts;
      this.previousStates = [];
      this.undoneStates = [];
      if (this.opts['applyOnImage']) {
        this.addCanvasToPaintable();
        this.setCanvasImage();
        this.createToolset();
        this.enablePainting();
      }
      if (this.opts['applyOnCanvas']) {
        this.canvas = this.opts.canvas;
        this.element = this.opts.element;
        this.context = $(this.canvas).get(0).getContext('2d');
        this.setCanvasImage();
        this.createToolset();
        this.enablePainting();
      }
    }

    Painter.prototype.addCanvasToPaintable = function() {
      this.element = this.opts['paintableElement'];
      this.canvas = $('<canvas></canvas>').insertAfter(this.element);
      this.canvas.css({
        top: 0,
        bottom: 0,
        left: 0,
        outline: '1px solid #FF0000',
        position: 'absolute'
      });
      this.canvas.attr({
        width: 600,
        height: 700
      });
      return this.context = $(this.canvas).get(0).getContext('2d');
    };

    Painter.prototype.createToolset = function() {
      return this.toolbar = new window.PaintMe.Toolbar(this);
    };

    Painter.prototype.setCanvasImage = function() {
      this.originalImage = new Image;
      this.originalImage.src = $(this.element).attr('src');
      return this.originalImage.onload = (function(_this) {
        return function() {
          return _this.context.drawImage(_this.originalImage, 0, 0, _this.element.width(), _this.element.height());
        };
      })(this);
    };

    Painter.prototype.enablePainting = function() {
      $(this.canvas)[0].onmousedown = (function(_this) {
        return function(event) {
          var selectedTool;
          if (!(_this.toolbar.tool && _this.toolbar.color)) {
            return;
          }
          selectedTool = _this.toolbar.tool;
          selectedTool.onmousedown(_this, event);
          return _this.previousStates.push(_this.context.canvas.toDataURL());
        };
      })(this);
      $(this.canvas)[0].onmousemove = (function(_this) {
        return function(event) {
          var selectedTool;
          if (!(_this.toolbar.tool && _this.toolbar.color)) {
            return;
          }
          selectedTool = _this.toolbar.tool;
          return selectedTool.onmousemove(_this, event);
        };
      })(this);
      return $(this.canvas)[0].onmouseup = (function(_this) {
        return function(e) {
          var selectedTool;
          if (!(_this.toolbar.tool && _this.toolbar.color)) {
            return;
          }
          selectedTool = _this.toolbar.tool;
          return selectedTool.onmouseup(_this, event);
        };
      })(this);
    };

    Painter.prototype.undo = function() {
      var imageObj, previousState;
      if (this.previousStates.length > 0) {
        previousState = this.previousStates.pop();
        this.undoneStates.push(this.context.canvas.toDataURL());
        imageObj = new Image;
        imageObj.src = previousState;
        return this.context.drawImage(imageObj, 0, 0);
      }
    };

    Painter.prototype.redo = function() {
      var imageObj, undoneState;
      if (this.undoneStates.length > 0) {
        undoneState = this.undoneStates.pop();
        this.previousStates.push(this.context.canvas.toDataURL());
        imageObj = new Image;
        imageObj.src = undoneState;
        return this.context.drawImage(imageObj, 0, 0);
      }
    };

    Painter.prototype.reset = function() {
      return this.context.drawImage(this.originalImage, 0, 0);
    };

    Painter.prototype.saveState = function() {
      return this.previousStates.push(this.context.canvas.toDataURL());
    };

    Painter.prototype.dismiss = function() {
      this.canvas.remove();
      return this.toolbar.dismiss();
    };

    return Painter;

  })();

}).call(this);
