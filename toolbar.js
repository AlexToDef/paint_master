// Generated by CoffeeScript 1.7.1
(function() {
  var Toolbar,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  window.PaintMe.Toolbar = Toolbar = (function() {
    function Toolbar(paintObj) {
      this.dismiss = __bind(this.dismiss, this);
      this.toolset = {};
      this.actionset = {};
      this.paintObj = paintObj;
      this.appendToolbarElement();
      this.appendTools();
      this.appendActions();
      this.setEventHandlers();
    }

    Toolbar.prototype.appendToolbarElement = function() {
      var template;
      template = '<div class="at-toolbar"><div class="controls actions"></div><div class="controls tools"></div></div>';
      return this.element = $(template).insertAfter($('canvas'));
    };

    Toolbar.prototype.appendTools = function() {
      var key, tools, value, _results;
      if (this.paintObj.opts.tools.length > 0) {
        tools = window.PaintMe.Instruments;
      } else {
        tools = window.PaintMe.Instruments;
      }
      _results = [];
      for (key in tools) {
        if (!__hasProp.call(tools, key)) continue;
        value = tools[key];
        console.log(value);
        _results.push(this.addTool(key, value));
      }
      return _results;
    };

    Toolbar.prototype.appendActions = function() {
      var actions, key, value, _results;
      if (this.paintObj.opts.actions) {
        actions = window.PaintMe.Actions;
      } else {
        actions = window.PaintMe.Actions;
      }
      _results = [];
      for (key in actions) {
        if (!__hasProp.call(actions, key)) continue;
        value = actions[key];
        _results.push(this.addAction(key, value));
      }
      return _results;
    };

    Toolbar.prototype.setEventHandlers = function() {
      var self;
      self = this;
      $('body').on('click', '.tool', function() {
        var toolName;
        toolName = $(this).data('name');
        console.log(toolName);
        self.tool = self.toolset[toolName];
        $('.at-toolbar .tool.active').removeClass('active');
        $('.at-toolbar .tool[data-name="' + toolName + '"').addClass('active');
        return self.tool.onPick(self.paintObj);
      });
      return $('body').on('click', '.action', function() {
        var actionName;
        actionName = $(this).data('name');
        return self.actionset[actionName].apply(self.paintObj);
      });
    };

    Toolbar.prototype.addTool = function(name, tool) {
      var block;
      this.toolset[name] = new tool;
      return block = $("<div class='tool' data-name='" + name + "'>" + this.toolset[name].iconCode + "</div>").appendTo(this.element.find('.tools'));
    };

    Toolbar.prototype.addAction = function(name, action) {
      var block;
      this.actionset[name] = new action;
      return block = $("<div class='action' data-name='" + name + "'>" + this.actionset[name].iconCode + "</div>").appendTo(this.element.find('.actions'));
    };

    Toolbar.prototype.includeTool = function(name, tool) {
      return this.toolset[name] = new tool(this.paintObj);
    };

    Toolbar.prototype.dismiss = function() {
      this.element.remove();
      return this.actionset.PickColor.remove();
    };

    return Toolbar;

  })();

}).call(this);
